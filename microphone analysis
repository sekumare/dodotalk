Microphone analysis :
====================

Better Quality options vs lower quality options :
================================================
The below methology is bettwe quality options :
 
Digital MEMS Microphone (I2S Interface)

MEMS mic with built-in ADC, outputs digital data via I2S (e.g., INMP441, SPH0645)

Connect directly to ESP32 I2S peripheral pins

Pros: Higher audio quality, less noise, no analog frontend
Cons: Slightly more complex wiring

Headphones Output
==================

ESP32 cannot drive headphones directly (very low power)

Use an external DAC + amplifier, such as:

MAX98357A (I2S DAC + amplifier)

PCM5102 (I2S DAC)

Or a simple amplifier board after DAC output

Connect headphones to DAC output (via amplifier)

Summary of the HW :
===================
| Component              | Connection                         | Notes                       |
| ---------------------- | ---------------------------------- | --------------------------- |
| Digital MEMS Mic (I2S) | I2S data pins (WS, BCK, DATA\_IN)  | Connect to ESP32 I2S input  |
| Headphone DAC + Amp    | I2S data pins (DATA\_OUT, BCK, WS) | Connect to ESP32 I2S output |
| Power Supply           | 3.3V                               | Stable power required       |
| Decoupling capacitors  | On mic and amp                     | To reduce noise             |

Software Overview (ESP-IDF):
============================

a) Initialize I2S for microphone (RX mode)

Configure ESP32 I2S peripheral to receive audio from digital mic (I2S RX)

Typically 16 or 24 bit, 16 kHz or 44.1 kHz sample rate

Use DMA buffers to read audio samples from microphone

b) Initialize I2S for headphone (TX mode)

Configure second I2S channel (or same with full-duplex support) for playback

Send audio data to DAC + amplifier

c) Audio Pipeline

Read data from microphone buffer (RX)

Process or directly forward to I2S TX buffer

Playback on headphones (DAC)

Example code : I2S config for microphone (I2S RX)
==================================================

#define I2S_NUM          (0)
#define SAMPLE_RATE      (16000)
#define I2S_BCK_IO       (GPIO_NUM_26)
#define I2S_WS_IO        (GPIO_NUM_25)
#define I2S_DATA_IN_IO   (GPIO_NUM_22)

void i2s_mic_init() {
    i2s_config_t i2s_config = {
        .mode = I2S_MODE_MASTER | I2S_MODE_RX,
        .sample_rate = SAMPLE_RATE,
        .bits_per_sample = I2S_BITS_PER_SAMPLE_16BIT,
        .channel_format = I2S_CHANNEL_FMT_ONLY_LEFT, // Mono mic
        .communication_format = I2S_COMM_FORMAT_I2S_MSB,
        .intr_alloc_flags = ESP_INTR_FLAG_LEVEL1,
        .dma_buf_count = 4,
        .dma_buf_len = 1024,
        .use_apll = false,
        .tx_desc_auto_clear = false,
        .fixed_mclk = 0
    };

    i2s_pin_config_t pin_config = {
        .bck_io_num = I2S_BCK_IO,
        .ws_io_num = I2S_WS_IO,
        .data_out_num = I2S_PIN_NO_CHANGE,   // RX only
        .data_in_num = I2S_DATA_IN_IO,
    };

    i2s_driver_install(I2S_NUM, &i2s_config, 0, NULL);
    i2s_set_pin(I2S_NUM, &pin_config);
}

I2S config for headphones (I2S TX)
=====================================
#define I2S_NUM_OUT      (1)
#define I2S_BCK_OUT_IO   (GPIO_NUM_27)
#define I2S_WS_OUT_IO    (GPIO_NUM_14)
#define I2S_DATA_OUT_IO  (GPIO_NUM_12)

void i2s_headphone_init() {
    i2s_config_t i2s_config = {
        .mode = I2S_MODE_MASTER | I2S_MODE_TX,
        .sample_rate = SAMPLE_RATE,
        .bits_per_sample = I2S_BITS_PER_SAMPLE_16BIT,
        .channel_format = I2S_CHANNEL_FMT_RIGHT_LEFT, // Stereo output
        .communication_format = I2S_COMM_FORMAT_I2S_MSB,
        .intr_alloc_flags = ESP_INTR_FLAG_LEVEL1,
        .dma_buf_count = 8,
        .dma_buf_len = 1024,
        .use_apll = false,
        .tx_desc_auto_clear = true,
        .fixed_mclk = 0
    };

    i2s_pin_config_t pin_config = {
        .bck_io_num = I2S_BCK_OUT_IO,
        .ws_io_num = I2S_WS_OUT_IO,
        .data_out_num = I2S_DATA_OUT_IO,
        .data_in_num = I2S_PIN_NO_CHANGE,
    };

    i2s_driver_install(I2S_NUM_OUT, &i2s_config, 0, NULL);
    i2s_set_pin(I2S_NUM_OUT, &pin_config);


    Audio loop (read mic â†’ play headphones)
    =========================================
void mic_to_headphones_task(void *arg) {
    size_t bytes_read, bytes_written;
    uint8_t i2s_read_buff[1024];

    while (1) {
        // Read microphone data
        i2s_read(I2S_NUM, (void*)i2s_read_buff, sizeof(i2s_read_buff), &bytes_read, portMAX_DELAY);

        // Write directly to headphones
        i2s_write(I2S_NUM_OUT, (const char *)i2s_read_buff, bytes_read, &bytes_written, portMAX_DELAY);
    }
}

In app_main()
==================
void app_main() {
    i2s_mic_init();
    i2s_headphone_init();

    xTaskCreate(mic_to_headphones_task, "mic_to_headphones", 4096, NULL, 5, NULL);
}

}
